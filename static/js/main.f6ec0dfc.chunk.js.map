{"version":3,"sources":["components/Cell.js","components/Library.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","Object","assign","this","propKey","properties","property","cellidx","onMouseUp","onMouseOver","onMouseDown","style","verticalAlign","width","rect","w","height","h","ref","svg","x","y","stroke","fill","cellColorFill","strokeWidth","e","svgRectEle","Component","Grid","liftStateToApp","liftstate","state","rowIndices","Array","from","rows","keys","colIndices","cols","numCells","cells","i","mouseAction","grid","setProperties","handleDataUpdate","bind","setState","getProperty","parseInt","removeProperty","cellIdx","event","type","buttons","removeFromCells","direction","neighborCellIdx","length","cellAIdx","cellBIdx","Math","abs","floor","className","map","row","key","col","cellIndex","mouseEvent","AStarManager","currCellIdx","destinationCellIdx","openList","closedList","cellFGHValues","gridstate","unReachable","getCellIdx","g","f","heuristicDistance","path","init","alert","step","pathCell","push","forEach","dir","getNeighborCellIdx","indexOf","neighborCellG","neighborCellF","undefined","lowestCostNeighbor","openCell","opListIdx","splice","App","getStateFromGrid","_gridstate","runAstar","refs","manager","run","resetAstar","reset","GRID","MANAGER","Fragment","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6ec0dfc.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Cell extends Component {\r\n    constructor(props={}) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    setProperties(props = {}) {\r\n        Object.assign(this.props, props);\r\n    }\r\n\r\n    getProperty(propKey) {\r\n        return this.props[propKey];\r\n    }\r\n\r\n    removeProperty(properties = []) {\r\n        for (let property of properties) {\r\n            delete this.props[property];\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <svg cellidx={this.props.cellidx} \r\n            onMouseUp={this.props.onMouseUp}\r\n            onMouseOver={this.props.onMouseOver}\r\n            onMouseDown={this.props.onMouseDown}\r\n            style={{display: \"inline\"}, {verticalAlign: \"top\"}} \r\n            \r\n            width={this.props.rect.w} \r\n            height={this.props.rect.h} \r\n            ref={(svg) => this.svg = svg}>\r\n                <rect\r\n                    x=\"0\"\r\n                    y=\"0\"\r\n                    width={this.props.rect.w}\r\n                    height={this.props.rect.h}\r\n                    stroke=\"black\"\r\n                    fill={this.props.cellColorFill}\r\n                    strokeWidth='1'\r\n                    ref={(e)=>this.svgRectEle = e}\r\n                />\r\n            </svg>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport default Cell;","import React, {Component} from 'react'\r\nimport Cell from './Cell';\r\n\r\nexport class Grid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.rowIndices = Array.from(Array(this.props.rows).keys());\r\n        this.colIndices = Array.from(Array(this.props.cols).keys());\r\n\r\n        let numCells = this.props.rows * this.props.cols;\r\n        this.cells = Array(numCells);\r\n        for (var i = 0; i < numCells; i++) {\r\n            this.cells[i] = new Cell();\r\n        }\r\n\r\n        this.mouseAction = null;\r\n        this.state = {\r\n            cells: this.cells,\r\n            grid: this\r\n        };\r\n\r\n\r\n\r\n        // assign start position and destination\r\n        this.cells[0].setProperties({'startPosition': true});\r\n        this.cells[945].setProperties({'destination': true});\r\n\r\n        \r\n        this.handleDataUpdate = this.handleDataUpdate.bind(this);\r\n        this.liftStateToApp();\r\n    }\r\n\r\n    liftStateToApp = () => {\r\n        this.props.liftstate(this.state);\r\n    }\r\n\r\n    handleDataUpdate() {\r\n        this.setState({\r\n            cells: this.cells,\r\n            grid: this\r\n        });\r\n\r\n        this.liftStateToApp();\r\n    }\r\n\r\n\r\n    getCellIdx(property) {\r\n        for (var i in this.cells) {\r\n            if (this.cells[i].getProperty(property)) {\r\n                return parseInt(i, 10);\r\n            }\r\n        }\r\n    }\r\n\r\n    removeFromCells(property) {\r\n        for (let i in this.cells) {\r\n            if (this.cells[i].props[property]) {\r\n                this.cells[i].removeProperty([property]);\r\n            } \r\n        }\r\n    }\r\n\r\n    mouseEvent(cellIdx, event) {\r\n        if (event.type === 'mouseup') {\r\n            this.mouseAction = null;\r\n            this.cells[cellIdx].removeProperty(['active']);\r\n  \r\n            return;\r\n        }\r\n        \r\n        // not holding down, ignore mouse over for this case\r\n        if (event.buttons !== 1 && event.type !== 'click') {\r\n            this.mouseAction = null;\r\n            \r\n            return;\r\n        }\r\n\r\n\r\n        if (this.mouseAction == null) {\r\n            if (this.cells[cellIdx].getProperty('startPosition')) {\r\n                this.mouseAction = (cellIdx) =>  {\r\n                    this.removeFromCells('startPosition');\r\n                    this.cells[cellIdx].setProperties({'startPosition': true});   \r\n                }\r\n            } else if (this.cells[cellIdx].getProperty('destination')) {\r\n                this.mouseAction = (cellIdx) => {\r\n                    this.removeFromCells('destination');\r\n                    this.cells[cellIdx].setProperties({'destination': true});\r\n                }\r\n            } else if (this.cells[cellIdx].getProperty('wall')) {\r\n                this.mouseAction = (cellIdx) => {\r\n                    this.cells[cellIdx].removeProperty(['wall']);\r\n                }\r\n            } else {\r\n                this.mouseAction = (cellIdx) => {\r\n                    this.cells[cellIdx].setProperties({'wall': true});\r\n                }\r\n            }\r\n        }\r\n\r\n             \r\n        this.handleDataUpdate();\r\n\r\n        this.cells[cellIdx].setProperties({ 'active': true });\r\n        this.mouseAction(cellIdx);\r\n    }\r\n\r\n    getNeighborCellIdx(cellIdx, direction) {\r\n        let neighborCellIdx;\r\n\r\n        switch (direction) {\r\n            case \"LEFT\":\r\n                neighborCellIdx = cellIdx - 1;\r\n                if ((neighborCellIdx+1) % this.colIndices.length === 0) {\r\n                    // on the left edge\r\n                    return null;\r\n                }\r\n                break;\r\n            case \"UP\":\r\n                neighborCellIdx = cellIdx - this.colIndices.length;\r\n                break;\r\n            case \"RIGHT\":\r\n                neighborCellIdx = cellIdx + 1;\r\n                if (neighborCellIdx % this.colIndices.length === 0) {\r\n                    // on the right edge\r\n                    return null;\r\n                }\r\n                break;\r\n            case \"DOWN\":\r\n                neighborCellIdx = cellIdx + this.colIndices.length;\r\n                break;\r\n            default:\r\n                neighborCellIdx = null;\r\n            \r\n        \r\n        }\r\n\r\n        if (neighborCellIdx < 0 || neighborCellIdx >= this.props.rows * this.props.cols)\r\n            return null;\r\n\r\n        return neighborCellIdx;\r\n    }\r\n\r\n    heuristicDistance(cellAIdx, cellBIdx) {\r\n        let horizontalDist = Math.abs(Math.floor(cellAIdx / this.colIndices.length) - Math.floor(cellBIdx / this.colIndices.length));\r\n        let verticalDist = Math.abs((cellAIdx % this.colIndices.length) - (cellBIdx % this.colIndices.length));\r\n        return horizontalDist + verticalDist;\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n    render() {\r\n        return (\r\n        \r\n            <div className='grid'>\r\n            {\r\n                this.rowIndices.map((row)=>{\r\n                    return (\r\n                        <div key={row} className='gridRow'>\r\n                        {\r\n                            this.colIndices.map((col)=>{\r\n                                let cellIndex = row * this.colIndices.length + col;\r\n\r\n                                let cellColorFill = \r\n                                this.cells[cellIndex].getProperty('startPosition') ? \"blue\" :\r\n                                this.cells[cellIndex].getProperty('destination') ? \"red\" : \r\n                                this.cells[cellIndex].getProperty('wall') ? \"black\" :\r\n                                this.cells[cellIndex].getProperty('path') ? \"grey\":\r\n                                \"none\";\r\n\r\n                                return (\r\n                                <Cell\r\n                                    cellColorFill={cellColorFill}\r\n                                    onMouseDown={this.mouseEvent.bind(this, cellIndex)}\r\n                                    onMouseOver={this.mouseEvent.bind(this, cellIndex)}\r\n                                    onMouseUp={this.mouseEvent.bind(this, cellIndex)}\r\n                                    key={`#cellIdx${cellIndex}`}\r\n                                    cellidx={row * this.colIndices.length + col}\r\n                                    rect={{w: 30, h: 30}}>\r\n                                </Cell>)\r\n                            })\r\n                        }\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport class AStarManager extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    reset() {\r\n        this.currCellIdx = null;\r\n        this.destinationCellIdx = null;\r\n        this.openList = [];\r\n        this.closedList = [];\r\n        this.cellFGHValues = {};\r\n\r\n        this.props.gridstate.grid.removeFromCells(['path']);\r\n        this.props.gridstate.grid.removeFromCells(['wall']);\r\n\r\n        this.props.gridstate.grid.handleDataUpdate();\r\n        this.unReachable = false;\r\n\r\n    }\r\n\r\n    init() {\r\n        // openList empty\r\n        // closed list containing only start cell\r\n        this.currCellIdx = this.props.gridstate.grid.getCellIdx('startPosition');\r\n        this.destinationCellIdx = this.props.gridstate.grid.getCellIdx('destination');\r\n        this.closedList = [this.currCellIdx];\r\n        this.cellFGHValues = {\r\n            [this.currCellIdx]: {\r\n                g: 0,\r\n                f: this.props.gridstate.grid.heuristicDistance(this.currCellIdx, this.destinationCellIdx)\r\n            }\r\n        };\r\n\r\n        this.path = [];\r\n        this.openList = [];\r\n        this.unReachable = false;\r\n    }\r\n\r\n    run() {\r\n        this.init();\r\n        while (this.currCellIdx !== this.destinationCellIdx) {\r\n            if (this.unReachable) {\r\n                alert(\"Destination Not Reachable.\");\r\n                break;\r\n            }\r\n\r\n            this.step();\r\n        }\r\n\r\n        // search ended, get the path\r\n        if (this.currCellIdx != null) {\r\n            let pathCell = this.currCellIdx;\r\n            while (this.cellFGHValues[pathCell].from) {\r\n                pathCell = this.cellFGHValues[pathCell].from;\r\n                this.path.push(pathCell);\r\n                this.props.gridstate.grid.cells[pathCell].setProperties({'path': true});\r\n            }\r\n        }\r\n\r\n        this.props.gridstate.grid.handleDataUpdate();\r\n\r\n\r\n    }\r\n\r\n    step() {\r\n        let neighborDirections = ['LEFT', 'UP', 'RIGHT', 'DOWN'];\r\n        \r\n        neighborDirections.forEach((dir) => {\r\n            let neighborCellIdx = this.props.gridstate.grid.getNeighborCellIdx(this.currCellIdx, dir);\r\n\r\n            if (neighborCellIdx == null || this.props.gridstate.cells[neighborCellIdx].getProperty('wall')) {\r\n                return;\r\n            }\r\n\r\n            // not yet visited\r\n            if (this.closedList.indexOf(neighborCellIdx) === -1) {\r\n                // add to openList first\r\n                if (this.openList.indexOf(neighborCellIdx) === -1) {\r\n                    this.openList.push(neighborCellIdx);\r\n                }\r\n\r\n                // calculate F, G values\r\n                let neighborCellG = this.cellFGHValues[this.currCellIdx].g + 1;\r\n                let neighborCellF = this.props.gridstate.grid.heuristicDistance(neighborCellIdx, this.destinationCellIdx) + neighborCellG;\r\n\r\n                // update F, G values\r\n                if (this.cellFGHValues[neighborCellIdx] === undefined || neighborCellG < this.cellFGHValues[neighborCellIdx].g) {\r\n                    this.cellFGHValues[neighborCellIdx] = {\r\n                        g: neighborCellG,\r\n                        f: neighborCellF,\r\n                        from: this.currCellIdx\r\n                    };\r\n                }\r\n            }\r\n\r\n        }); \r\n\r\n        let lowestCostNeighbor = null;\r\n        for (let i in this.openList) {\r\n            let openCell = this.openList[i];\r\n            if (lowestCostNeighbor == null || this.cellFGHValues[openCell].f < this.cellFGHValues[lowestCostNeighbor].f) {\r\n                lowestCostNeighbor = openCell;\r\n            }\r\n        }\r\n\r\n        this.currCellIdx = lowestCostNeighbor;\r\n        // finished with this cell, push to closedlist, exclude from openlist\r\n        this.closedList.push(this.currCellIdx);\r\n        let opListIdx = this.openList.indexOf(this.currCellIdx);\r\n        this.openList.splice(opListIdx, 1);\r\n\r\n        if (this.openList.length === 0)\r\n            this.unReachable = true;\r\n            \r\n    }\r\n\r\n\r\n    render() {\r\n        return null;\r\n    }\r\n\r\n};\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport { Grid, AStarManager } from './components/Library';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.GRID = () => <Grid rows={20} cols={50} liftstate={this.getStateFromGrid}></Grid>;\r\n        this.MANAGER = () => <AStarManager gridstate={this.state.grid}/>;\r\n\r\n        this.state = {\r\n            grid: null\r\n        };\r\n\r\n    }\r\n\r\n    getStateFromGrid = (_gridstate) => {\r\n        this.setState({\r\n            grid: _gridstate\r\n        });\r\n\r\n    }\r\n\r\n    runAstar = () => {\r\n        this.refs.manager.run();\r\n    }\r\n\r\n    resetAstar = () => {\r\n        this.refs.manager.reset();\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"App\">\r\n                    <div>\r\n                        <Grid rows={20} cols={50} liftstate={this.getStateFromGrid}></Grid>\r\n                    </div>\r\n                    <button onClick={this.runAstar}>RUN</button>\r\n                    <button onClick={this.resetAstar}>RESET</button>\r\n                    <div> <AStarManager gridstate={this.state.grid} ref=\"manager\"/> </div>\r\n                </div>   \r\n            </React.Fragment>\r\n            \r\n\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}